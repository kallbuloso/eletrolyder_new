<?php

namespace {{controllerNamespace}};

use {{modelNamespace}}\{{modelName}};
use Illuminate\Http\Request;
use {{requestNamespace}}\{{modelName}}Request;
use {{serviceNamespace}}\{{modelName}}Service;
use App\Http\Controllers\Controller;

/**
 * Class {{modelName}}Controller
 * @package App\Http\Controllers
 */
class {{modelName}}Controller extends Controller
{
  /**
   * {{modelName}} Service
   * @var {{modelName}}Service
   */
  private $service;

  /**
   * Page Title
   * @var string
   */
  private $pageTitle = '{{modelName}}';

  /**
   * Title Singular
   * @var string
   */
  private $titleSingular = '{{modelName}}';

  /**
   * Summary of pageIndex
   * @var string
   */
  private $pageIndex = '';

  /**
   * Summary of routeBase
   * @var string
   */
  private $routeBase = '{{modelRoute}}.';

  /**
   * Summary of pathView
   * @var string
   */
  private $pathView = '{{pathView}}';

  /**
   * {{modelName}}Controller constructor.
   * @param {{modelName}}Service $service
   */
  public function __construct({{modelName}}Service $service)
  {
    $this->service = $service;
    $this->pageIndex = $this->routeBase . 'index';
  }

  /**
   * Display a listing of the resource.
   *
   * @param  Request  $request
   * @return \Illuminate\Http\JsonResponse|\Inertia\Response
   */
  public function index(Request $request): \Illuminate\Http\JsonResponse|\Inertia\Response
  {
    $this->authorize('{{modelNameLowerCase}} listar');

    try {
      $query = {{modelName}}::query();
      $fields = {{modelName}}::getSearchable();
      $query = $this->service->applyFilters($query, $request, $fields);
      $data = $query->paginate($request->get('limit', 10));

      if ($request->wantsJson()) {
        return response()->json($data);
      }

      return $this->renderPage("$this->pathView/Index", [
        'title' => $this->pageTitle,
        'breadcrumbs' => [
          ['title' => 'Dashboard', 'href' => route('dashboard')],
          ['title' => $this->pageTitle, 'disabled' => true],
        ],
        'count' => $this->service->count(),
        'routeDefault' => $this->routeBase,
      ]);
    } catch (\Exception $e) {
      if ($request->wantsJson()) {
        return response()->json(['error' => $e->getMessage()], 500);
      }
      throw $e;
    }

    // $query = {{modelName}}::query();
    // $query = $this->service->applyFilters($query, $request);
    // $data = $query->paginate($request->get('limit', 10));
    // return $this->renderPage("$this->pathView/Index", [
    //   'title' => $this->pageTitle,
    //   'breadcrumbs' => [
    //     ['title' => 'Dashboard', 'href' => route('dashboard')],
    //     ['title' => $this->pageTitle, 'disabled' => true],
    //   ],
    //   'data' => $data,
    // ]);
  }

  /**
   * Show the form for creating a new resource.
   *
   * @return \Momentum\Modal\Modal
   */
  public function create(): \Momentum\Modal\Modal
  {
    $this->authorize('{{modelNameLowerCase}} criar');

    return $this->renderModal("$this->pathView/Create")
      ->with([
        'title' => "Adicionar $this->titleSingular",
        'routeDefault' => $this->routeBase,
      ])
      ->baseRoute($this->pageIndex);

    // return $this->renderPage("$this->pathView/Form", [
    //   'title' => "Adicionar $this->titleSingular",
    //   'breadcrumbs' => [
    //     ['title' => 'Dashboard', 'href' => route('dashboard')],
    //     ['title' => $this->pageTitle, 'href' => route($this->pageIndex)],
    //     ['title' => 'Adicionar', 'disabled' => true],
    //   ],
    // ]);
  }

  /**
   * Store a newly created resource in storage.
   *
   * @param  {{modelName}}Request  $request
   * @return \Illuminate\Http\RedirectResponse
   */
  public function store({{modelName}}Request $request): \Illuminate\Http\RedirectResponse
  {
    $this->authorize('{{modelNameLowerCase}} criar');

    $val = $request->validated();
  
    // Todo: ajustar nome da validação
    $existingStatus = $this->service->where('description', $val['description'])
      ->where('tenant_id', session('tenant_id'))
      ->first();

    if ($existingStatus) {
      return redirect()->back()
        ->withErrors(['description' => 'Já existe um aparelho com essa descrição.'])
        ->withInput();
    }

    $this->service->create($val);

    return redirect()->route($this->pageIndex)
      ->toast("$this->titleSingular adicionado com sucesso.", 'success');
  }

    /**
     * Store a newly created resource in storage.
     *
     * @param  PhoneRequest  $request
     * @param  $clientId
     * @return \Illuminate\Http\RedirectResponse
     */
    public function storePhone(PhoneRequest $request, ${{modelNameLowerCase}}Id): \Illuminate\Http\RedirectResponse
    {
        $this->authorize('phone criar');

        ${{modelNameLowerCase}} = $this->service->getById(${{modelNameLowerCase}}Id);

        ${{modelNameLowerCase}}->phones()->create([
            'phone_type' => $request->phone_type,
            'phone_number' => $request->phone_number,
            'phone_contact' => $request->phone_contact,
            'phone_has_whatsapp' => $request->phone_has_whatsapp,
        ]);
        return redirect()->back()
            ->toast("Telefone adicionado ao $this->titleSingular.", 'success');
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  AddressRequest  $request
     * @param  $clientId
     * @return \Illuminate\Http\RedirectResponse
     */
    public function storeAddress(AddressRequest $request, $clientId): \Illuminate\Http\RedirectResponse
    {
        $this->authorize('address criar');

        $client = $this->service->getById($clientId);

        $client->addresses()->create([
            'type' => $request->type,
            'street' => $request->street,
            'number' => $request->number,
            'complement' => $request->complement,
            'neighborhood' => $request->neighborhood,
            'city' => $request->city,
            'state' => $request->state,
            'country' => $request->country,
            'zip_code' => $request->zip_code,
            'reference' => $request->reference,
        ]);

        return redirect()->back()
            ->toast("Endereço adicionado ao $this->titleSingular.", 'success');
    }

  /**
   * Display the specified resource.
   *
   * @return \Inertia\Response
   */
  public function show($id): \Inertia\Response
  {
    $this->authorize('{{modelNameLowerCase}} ver');

    return $this->renderPage("$this->pathView/Show", [
      'title' => 'Detalhes de ' . $this->titleSingular,
      'breadcrumbs' => [
        ['title' => 'Dashboard', 'href' => route('dashboard')],
        ['title' => $this->pageTitle, 'href' => route($this->pageIndex)],
        ['title' => 'Mostrar', 'disabled' => true],
      ],
      'data' => $this->service->getById($id),
    ]);
  }

  /**
   * Show the form for editing the specified resource.
   *
   * @return \Momentum\Modal\Modal
   */
  public function edit($id): \Momentum\Modal\Modal
  {
    $this->authorize('{{modelNameLowerCase}} editar');
    
    $data = $this->service->getById($id);

    return $this->renderModal("$this->pathView/Edit")
      ->with([
        'title' => "Editar $this->titleSingular",
        'data' => $data,
        'routeDefault' => $this->routeBase,
      ])
      ->baseRoute($this->pageIndex);
  }

  /**
   * Update the specified resource in storage.
   *
   * @param  {{modelName}}Request  $request
   * @param  $id
   * @return \Illuminate\Http\RedirectResponse
   */
  public function update({{modelName}}Request $request, $id): \Illuminate\Http\RedirectResponse
  {
    $this->authorize('{{modelNameLowerCase}} editar');

    $val = $request->validated();

    // Todo: Ajustar validação
    $existingStatus = $this->service->where('description', $val['description'])
      ->where('tenant_id', session('tenant_id'))
      ->where('id', $id, '!=')
      ->first();

    if ($existingStatus) {
      return redirect()->back()
        ->withErrors(['description' => 'Já existe um aparelho com essa descrição.'])
        ->withInput();
    }

    $this->service->update($id, $val);

    return redirect()->back()
      ->toast("$this->titleSingular atualizado.", 'success');
  }

  /**
   * Remove the specified resource from storage.
   *
   * @param  $id
   * @return \Illuminate\Http\RedirectResponse
   */
  public function destroy($id): \Illuminate\Http\RedirectResponse
  {
    $this->authorize('{{modelNameLowerCase}} excluir');

    $this->service->deleteById($id);

    return redirect()->route($this->pageIndex)
      ->toast("$this->titleSingular excluído.", 'success');
  }
}
