/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// noinspection JSUnusedGlobalSymbols
// Generated by unplugin-auto-import
export {}
declare global {
  const EffectScope: (typeof import('vue'))['EffectScope']
  const acceptHMRUpdate: (typeof import('pinia'))['acceptHMRUpdate']
  const alphaDashValidator: (typeof import('./resources/js/utils/validators.js'))['alphaDashValidator']
  const alphaValidator: (typeof import('./resources/js/utils/validators.js'))['alphaValidator']
  const apiHeaders: (typeof import('./resources/js/utils/header.js'))['apiHeaders']
  const avatarText: (typeof import('./resources/js/utils/formatters.js'))['avatarText']
  const betweenValidator: (typeof import('./resources/js/utils/validators.js'))['betweenValidator']
  const can: (typeof import('./resources/js/utils/helpers.js'))['can']
  const cepValidator: (typeof import('./resources/js/utils/validators.js'))['cepValidator']
  const cnpjValidator: (typeof import('./resources/js/utils/validators.js'))['cnpjValidator']
  const computed: (typeof import('vue'))['computed']
  const confirmedValidator: (typeof import('./resources/js/utils/validators.js'))['confirmedValidator']
  const cpfValidator: (typeof import('./resources/js/utils/validators.js'))['cpfValidator']
  const createApp: (typeof import('vue'))['createApp']
  const createPinia: (typeof import('pinia'))['createPinia']
  const customRef: (typeof import('vue'))['customRef']
  const dateValidator: (typeof import('./resources/js/utils/validators.js'))['dateValidator']
  const defineAsyncComponent: (typeof import('vue'))['defineAsyncComponent']
  const defineComponent: (typeof import('vue'))['defineComponent']
  const defineStore: (typeof import('pinia'))['defineStore']
  const effectScope: (typeof import('vue'))['effectScope']
  const emailValidator: (typeof import('./resources/js/utils/validators.js'))['emailValidator']
  const formatDate: (typeof import('./resources/js/utils/formatters.js'))['formatDate']
  const formatDateToMonthShort: (typeof import('./resources/js/utils/formatters.js'))['formatDateToMonthShort']
  const getActivePinia: (typeof import('pinia'))['getActivePinia']
  const getCurrentInstance: (typeof import('vue'))['getCurrentInstance']
  const getCurrentScope: (typeof import('vue'))['getCurrentScope']
  const h: (typeof import('vue'))['h']
  const inject: (typeof import('vue'))['inject']
  const integerValidator: (typeof import('./resources/js/utils/validators.js'))['integerValidator']
  const isArrayOfObjects: (typeof import('./resources/js/utils/helpers.js'))['isArrayOfObjects']
  const isEmpty: (typeof import('./resources/js/utils/helpers.js'))['isEmpty']
  const isEmptyArray: (typeof import('./resources/js/utils/helpers.js'))['isEmptyArray']
  const isNotEmpty: (typeof import('./resources/js/utils/helpers.js'))['isNotEmpty']
  const isNullOrUndefined: (typeof import('./resources/js/utils/helpers.js'))['isNullOrUndefined']
  const isObject: (typeof import('./resources/js/utils/helpers.js'))['isObject']
  const isProxy: (typeof import('vue'))['isProxy']
  const isReactive: (typeof import('vue'))['isReactive']
  const isReadonly: (typeof import('vue'))['isReadonly']
  const isRef: (typeof import('vue'))['isRef']
  const isToday: (typeof import('./resources/js/utils/helpers.js'))['isToday']
  const isValidLength: (typeof import('./resources/js/utils/validators.js'))['isValidLength']
  const kFormatter: (typeof import('./resources/js/utils/formatters.js'))['kFormatter']
  const lengthValidator: (typeof import('./resources/js/utils/validators.js'))['lengthValidator']
  const mapActions: (typeof import('pinia'))['mapActions']
  const mapGetters: (typeof import('pinia'))['mapGetters']
  const mapState: (typeof import('pinia'))['mapState']
  const mapStores: (typeof import('pinia'))['mapStores']
  const mapWritableState: (typeof import('pinia'))['mapWritableState']
  const markRaw: (typeof import('vue'))['markRaw']
  const nextTick: (typeof import('vue'))['nextTick']
  const onActivated: (typeof import('vue'))['onActivated']
  const onBeforeMount: (typeof import('vue'))['onBeforeMount']
  const onBeforeUnmount: (typeof import('vue'))['onBeforeUnmount']
  const onBeforeUpdate: (typeof import('vue'))['onBeforeUpdate']
  const onDeactivated: (typeof import('vue'))['onDeactivated']
  const onErrorCaptured: (typeof import('vue'))['onErrorCaptured']
  const onLoading: (typeof import('./resources/js/utils/helpers.js'))['onLoading']
  const onMounted: (typeof import('vue'))['onMounted']
  const onRenderTracked: (typeof import('vue'))['onRenderTracked']
  const onRenderTriggered: (typeof import('vue'))['onRenderTriggered']
  const onScopeDispose: (typeof import('vue'))['onScopeDispose']
  const onServerPrefetch: (typeof import('vue'))['onServerPrefetch']
  const onUnmounted: (typeof import('vue'))['onUnmounted']
  const onUpdated: (typeof import('vue'))['onUpdated']
  const onWatcherCleanup: (typeof import('vue'))['onWatcherCleanup']
  const pagedArray: (typeof import('./resources/js/utils/pagedarray.js'))['pagedArray']
  const passwordValidator: (typeof import('./resources/js/utils/validators.js'))['passwordValidator']
  const permitCreate: (typeof import('./resources/js/utils/helpers.js'))['permitCreate']
  const permitDelete: (typeof import('./resources/js/utils/helpers.js'))['permitDelete']
  const permitEdit: (typeof import('./resources/js/utils/helpers.js'))['permitEdit']
  const permitList: (typeof import('./resources/js/utils/helpers.js'))['permitList']
  const permitShow: (typeof import('./resources/js/utils/helpers.js'))['permitShow']
  const phoneValidator: (typeof import('./resources/js/utils/validators.js'))['phoneValidator']
  const prefixWithPlus: (typeof import('./resources/js/utils/formatters.js'))['prefixWithPlus']
  const provide: (typeof import('vue'))['provide']
  const reactive: (typeof import('vue'))['reactive']
  const readonly: (typeof import('vue'))['readonly']
  const ref: (typeof import('vue'))['ref']
  const regexValidator: (typeof import('./resources/js/utils/validators.js'))['regexValidator']
  const requiredValidator: (typeof import('./resources/js/utils/validators.js'))['requiredValidator']
  const resolveComponent: (typeof import('vue'))['resolveComponent']
  const route: (typeof import('./resources/js/utils/helpers.js'))['route']
  const router: (typeof import('@inertiajs/vue3'))['router']
  const setActivePinia: (typeof import('pinia'))['setActivePinia']
  const setMapStoreSuffix: (typeof import('pinia'))['setMapStoreSuffix']
  const setMetadata: (typeof import('./resources/js/utils/metadata.js'))['setMetadata']
  const shallowReactive: (typeof import('vue'))['shallowReactive']
  const shallowReadonly: (typeof import('vue'))['shallowReadonly']
  const shallowRef: (typeof import('vue'))['shallowRef']
  const storeToRefs: (typeof import('pinia'))['storeToRefs']
  const stringLimit: (typeof import('./resources/js/utils/helpers.js'))['stringLimit']
  const swDeleteConfirm: (typeof import('./resources/js/utils/sweetAlert2.js'))['swDeleteConfirm']
  const swDeleteQuestion: (typeof import('./resources/js/utils/sweetAlert2.js'))['swDeleteQuestion']
  const swToast: (typeof import('./resources/js/utils/sweetAlert2.js'))['swToast']
  const toRaw: (typeof import('vue'))['toRaw']
  const toRef: (typeof import('vue'))['toRef']
  const toRefs: (typeof import('vue'))['toRefs']
  const toValue: (typeof import('vue'))['toValue']
  const triggerRef: (typeof import('vue'))['triggerRef']
  const unref: (typeof import('vue'))['unref']
  const urlValidator: (typeof import('./resources/js/utils/validators.js'))['urlValidator']
  const useAttrs: (typeof import('vue'))['useAttrs']
  const useCssModule: (typeof import('vue'))['useCssModule']
  const useCssVars: (typeof import('vue'))['useCssVars']
  const useForm: (typeof import('@inertiajs/vue3'))['useForm']
  const useId: (typeof import('vue'))['useId']
  const useModel: (typeof import('vue'))['useModel']
  const usePage: (typeof import('@inertiajs/vue3'))['usePage']
  const useSlots: (typeof import('vue'))['useSlots']
  const useTemplateRef: (typeof import('vue'))['useTemplateRef']
  const watch: (typeof import('vue'))['watch']
  const watchEffect: (typeof import('vue'))['watchEffect']
  const watchPostEffect: (typeof import('vue'))['watchPostEffect']
  const watchSyncEffect: (typeof import('vue'))['watchSyncEffect']
}
// for type re-export
declare global {
  // @ts-ignore
  export type {
    Component,
    ComponentPublicInstance,
    ComputedRef,
    DirectiveBinding,
    ExtractDefaultPropTypes,
    ExtractPropTypes,
    ExtractPublicPropTypes,
    InjectionKey,
    PropType,
    Ref,
    MaybeRef,
    MaybeRefOrGetter,
    VNode,
    WritableComputedRef
  } from 'vue'
  import('vue')
}
// for vue template auto import
import { UnwrapRef } from 'vue'
declare module 'vue' {
  interface GlobalComponents {}
  interface ComponentCustomProperties {
    readonly EffectScope: UnwrapRef<(typeof import('vue'))['EffectScope']>
    readonly acceptHMRUpdate: UnwrapRef<(typeof import('pinia'))['acceptHMRUpdate']>
    readonly alphaDashValidator: UnwrapRef<(typeof import('./resources/js/utils/validators.js'))['alphaDashValidator']>
    readonly alphaValidator: UnwrapRef<(typeof import('./resources/js/utils/validators.js'))['alphaValidator']>
    readonly apiHeaders: UnwrapRef<(typeof import('./resources/js/utils/header.js'))['apiHeaders']>
    readonly avatarText: UnwrapRef<(typeof import('./resources/js/utils/formatters.js'))['avatarText']>
    readonly betweenValidator: UnwrapRef<(typeof import('./resources/js/utils/validators.js'))['betweenValidator']>
    readonly can: UnwrapRef<(typeof import('./resources/js/utils/helpers.js'))['can']>
    readonly cepValidator: UnwrapRef<(typeof import('./resources/js/utils/validators.js'))['cepValidator']>
    readonly cnpjValidator: UnwrapRef<(typeof import('./resources/js/utils/validators.js'))['cnpjValidator']>
    readonly computed: UnwrapRef<(typeof import('vue'))['computed']>
    readonly confirmedValidator: UnwrapRef<(typeof import('./resources/js/utils/validators.js'))['confirmedValidator']>
    readonly cpfValidator: UnwrapRef<(typeof import('./resources/js/utils/validators.js'))['cpfValidator']>
    readonly createApp: UnwrapRef<(typeof import('vue'))['createApp']>
    readonly createPinia: UnwrapRef<(typeof import('pinia'))['createPinia']>
    readonly customRef: UnwrapRef<(typeof import('vue'))['customRef']>
    readonly dateValidator: UnwrapRef<(typeof import('./resources/js/utils/validators.js'))['dateValidator']>
    readonly defineAsyncComponent: UnwrapRef<(typeof import('vue'))['defineAsyncComponent']>
    readonly defineComponent: UnwrapRef<(typeof import('vue'))['defineComponent']>
    readonly defineStore: UnwrapRef<(typeof import('pinia'))['defineStore']>
    readonly effectScope: UnwrapRef<(typeof import('vue'))['effectScope']>
    readonly emailValidator: UnwrapRef<(typeof import('./resources/js/utils/validators.js'))['emailValidator']>
    readonly formatDate: UnwrapRef<(typeof import('./resources/js/utils/formatters.js'))['formatDate']>
    readonly formatDateToMonthShort: UnwrapRef<(typeof import('./resources/js/utils/formatters.js'))['formatDateToMonthShort']>
    readonly getActivePinia: UnwrapRef<(typeof import('pinia'))['getActivePinia']>
    readonly getCurrentInstance: UnwrapRef<(typeof import('vue'))['getCurrentInstance']>
    readonly getCurrentScope: UnwrapRef<(typeof import('vue'))['getCurrentScope']>
    readonly h: UnwrapRef<(typeof import('vue'))['h']>
    readonly inject: UnwrapRef<(typeof import('vue'))['inject']>
    readonly integerValidator: UnwrapRef<(typeof import('./resources/js/utils/validators.js'))['integerValidator']>
    readonly isArrayOfObjects: UnwrapRef<(typeof import('./resources/js/utils/helpers.js'))['isArrayOfObjects']>
    readonly isEmpty: UnwrapRef<(typeof import('./resources/js/utils/helpers.js'))['isEmpty']>
    readonly isEmptyArray: UnwrapRef<(typeof import('./resources/js/utils/helpers.js'))['isEmptyArray']>
    readonly isNotEmpty: UnwrapRef<(typeof import('./resources/js/utils/helpers.js'))['isNotEmpty']>
    readonly isNullOrUndefined: UnwrapRef<(typeof import('./resources/js/utils/helpers.js'))['isNullOrUndefined']>
    readonly isObject: UnwrapRef<(typeof import('./resources/js/utils/helpers.js'))['isObject']>
    readonly isProxy: UnwrapRef<(typeof import('vue'))['isProxy']>
    readonly isReactive: UnwrapRef<(typeof import('vue'))['isReactive']>
    readonly isReadonly: UnwrapRef<(typeof import('vue'))['isReadonly']>
    readonly isRef: UnwrapRef<(typeof import('vue'))['isRef']>
    readonly isToday: UnwrapRef<(typeof import('./resources/js/utils/helpers.js'))['isToday']>
    readonly isValidLength: UnwrapRef<(typeof import('./resources/js/utils/validators.js'))['isValidLength']>
    readonly kFormatter: UnwrapRef<(typeof import('./resources/js/utils/formatters.js'))['kFormatter']>
    readonly lengthValidator: UnwrapRef<(typeof import('./resources/js/utils/validators.js'))['lengthValidator']>
    readonly mapActions: UnwrapRef<(typeof import('pinia'))['mapActions']>
    readonly mapGetters: UnwrapRef<(typeof import('pinia'))['mapGetters']>
    readonly mapState: UnwrapRef<(typeof import('pinia'))['mapState']>
    readonly mapStores: UnwrapRef<(typeof import('pinia'))['mapStores']>
    readonly mapWritableState: UnwrapRef<(typeof import('pinia'))['mapWritableState']>
    readonly markRaw: UnwrapRef<(typeof import('vue'))['markRaw']>
    readonly nextTick: UnwrapRef<(typeof import('vue'))['nextTick']>
    readonly onActivated: UnwrapRef<(typeof import('vue'))['onActivated']>
    readonly onBeforeMount: UnwrapRef<(typeof import('vue'))['onBeforeMount']>
    readonly onBeforeUnmount: UnwrapRef<(typeof import('vue'))['onBeforeUnmount']>
    readonly onBeforeUpdate: UnwrapRef<(typeof import('vue'))['onBeforeUpdate']>
    readonly onDeactivated: UnwrapRef<(typeof import('vue'))['onDeactivated']>
    readonly onErrorCaptured: UnwrapRef<(typeof import('vue'))['onErrorCaptured']>
    readonly onLoading: UnwrapRef<(typeof import('./resources/js/utils/helpers.js'))['onLoading']>
    readonly onMounted: UnwrapRef<(typeof import('vue'))['onMounted']>
    readonly onRenderTracked: UnwrapRef<(typeof import('vue'))['onRenderTracked']>
    readonly onRenderTriggered: UnwrapRef<(typeof import('vue'))['onRenderTriggered']>
    readonly onScopeDispose: UnwrapRef<(typeof import('vue'))['onScopeDispose']>
    readonly onServerPrefetch: UnwrapRef<(typeof import('vue'))['onServerPrefetch']>
    readonly onUnmounted: UnwrapRef<(typeof import('vue'))['onUnmounted']>
    readonly onUpdated: UnwrapRef<(typeof import('vue'))['onUpdated']>
    readonly onWatcherCleanup: UnwrapRef<(typeof import('vue'))['onWatcherCleanup']>
    readonly pagedArray: UnwrapRef<(typeof import('./resources/js/utils/pagedarray.js'))['pagedArray']>
    readonly passwordValidator: UnwrapRef<(typeof import('./resources/js/utils/validators.js'))['passwordValidator']>
    readonly permitCreate: UnwrapRef<(typeof import('./resources/js/utils/helpers.js'))['permitCreate']>
    readonly permitDelete: UnwrapRef<(typeof import('./resources/js/utils/helpers.js'))['permitDelete']>
    readonly permitEdit: UnwrapRef<(typeof import('./resources/js/utils/helpers.js'))['permitEdit']>
    readonly permitList: UnwrapRef<(typeof import('./resources/js/utils/helpers.js'))['permitList']>
    readonly permitShow: UnwrapRef<(typeof import('./resources/js/utils/helpers.js'))['permitShow']>
    readonly phoneValidator: UnwrapRef<(typeof import('./resources/js/utils/validators.js'))['phoneValidator']>
    readonly prefixWithPlus: UnwrapRef<(typeof import('./resources/js/utils/formatters.js'))['prefixWithPlus']>
    readonly provide: UnwrapRef<(typeof import('vue'))['provide']>
    readonly reactive: UnwrapRef<(typeof import('vue'))['reactive']>
    readonly readonly: UnwrapRef<(typeof import('vue'))['readonly']>
    readonly ref: UnwrapRef<(typeof import('vue'))['ref']>
    readonly regexValidator: UnwrapRef<(typeof import('./resources/js/utils/validators.js'))['regexValidator']>
    readonly requiredValidator: UnwrapRef<(typeof import('./resources/js/utils/validators.js'))['requiredValidator']>
    readonly resolveComponent: UnwrapRef<(typeof import('vue'))['resolveComponent']>
    readonly route: UnwrapRef<(typeof import('./resources/js/utils/helpers.js'))['route']>
    readonly router: UnwrapRef<(typeof import('@inertiajs/vue3'))['router']>
    readonly setActivePinia: UnwrapRef<(typeof import('pinia'))['setActivePinia']>
    readonly setMapStoreSuffix: UnwrapRef<(typeof import('pinia'))['setMapStoreSuffix']>
    readonly setMetadata: UnwrapRef<(typeof import('./resources/js/utils/metadata.js'))['setMetadata']>
    readonly shallowReactive: UnwrapRef<(typeof import('vue'))['shallowReactive']>
    readonly shallowReadonly: UnwrapRef<(typeof import('vue'))['shallowReadonly']>
    readonly shallowRef: UnwrapRef<(typeof import('vue'))['shallowRef']>
    readonly storeToRefs: UnwrapRef<(typeof import('pinia'))['storeToRefs']>
    readonly stringLimit: UnwrapRef<(typeof import('./resources/js/utils/helpers.js'))['stringLimit']>
    readonly swDeleteConfirm: UnwrapRef<(typeof import('./resources/js/utils/sweetAlert2.js'))['swDeleteConfirm']>
    readonly swDeleteQuestion: UnwrapRef<(typeof import('./resources/js/utils/sweetAlert2.js'))['swDeleteQuestion']>
    readonly swToast: UnwrapRef<(typeof import('./resources/js/utils/sweetAlert2.js'))['swToast']>
    readonly toRaw: UnwrapRef<(typeof import('vue'))['toRaw']>
    readonly toRef: UnwrapRef<(typeof import('vue'))['toRef']>
    readonly toRefs: UnwrapRef<(typeof import('vue'))['toRefs']>
    readonly toValue: UnwrapRef<(typeof import('vue'))['toValue']>
    readonly triggerRef: UnwrapRef<(typeof import('vue'))['triggerRef']>
    readonly unref: UnwrapRef<(typeof import('vue'))['unref']>
    readonly urlValidator: UnwrapRef<(typeof import('./resources/js/utils/validators.js'))['urlValidator']>
    readonly useAttrs: UnwrapRef<(typeof import('vue'))['useAttrs']>
    readonly useCssModule: UnwrapRef<(typeof import('vue'))['useCssModule']>
    readonly useCssVars: UnwrapRef<(typeof import('vue'))['useCssVars']>
    readonly useForm: UnwrapRef<(typeof import('@inertiajs/vue3'))['useForm']>
    readonly useId: UnwrapRef<(typeof import('vue'))['useId']>
    readonly useModel: UnwrapRef<(typeof import('vue'))['useModel']>
    readonly usePage: UnwrapRef<(typeof import('@inertiajs/vue3'))['usePage']>
    readonly useSlots: UnwrapRef<(typeof import('vue'))['useSlots']>
    readonly useTemplateRef: UnwrapRef<(typeof import('vue'))['useTemplateRef']>
    readonly watch: UnwrapRef<(typeof import('vue'))['watch']>
    readonly watchEffect: UnwrapRef<(typeof import('vue'))['watchEffect']>
    readonly watchPostEffect: UnwrapRef<(typeof import('vue'))['watchPostEffect']>
    readonly watchSyncEffect: UnwrapRef<(typeof import('vue'))['watchSyncEffect']>
  }
}
